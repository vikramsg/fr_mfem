/*
  ---[ Defines Known At Compile-Time ]------------
  VTYPE: Type of vector (e.g. double)
  ================================================
*/

//---[ Addition ]-----------------------
// out = in1 + in2
kernel void add_vv(const int entries,
                   const VTYPE * in1,
                   const VTYPE * in2,
                   VTYPE * out) {
  for (int oi = 0; oi < entries; oi += 64; outer) {
    for (int i = oi; i < (oi + 64); ++i; inner) {
      if (i < entries) {
        out[i] = in1[i] + in2[i];
      }
    }
  }
}

// out = in1 + (alpha * in2)
kernel void add_vcv(const int entries,
                    const VTYPE * in1,
                    const VTYPE alpha,
                    const VTYPE * in2,
                    VTYPE * out) {
  for (int oi = 0; oi < entries; oi += 64; outer) {
    for (int i = oi; i < (oi + 64); ++i; inner) {
      if (i < entries) {
        out[i] = in1[i] + (alpha * in2[i]);
      }
    }
  }
}

// out = alpha * (in1 + in2)
kernel void add_cvv(const int entries,
                    const VTYPE alpha,
                    const VTYPE * in1,
                    const VTYPE * in2,
                    VTYPE * out) {
  for (int oi = 0; oi < entries; oi += 64; outer) {
    for (int i = oi; i < (oi + 64); ++i; inner) {
      if (i < entries) {
        out[i] = alpha * (in1[i] + in2[i]);
      }
    }
  }
}

// out = (alpha * in1) + (beta * in2)
kernel void add_cvcv(const int entries,
                     const VTYPE alpha,
                     const VTYPE * in1,
                     const VTYPE beta,
                     const VTYPE * in2,
                     VTYPE * out) {
  for (int oi = 0; oi < entries; oi += 64; outer) {
    for (int i = oi; i < (oi + 64); ++i; inner) {
      if (i < entries) {
        out[i] = (alpha * in1[i]) + (beta * in2[i]);
      }
    }
  }
}
//======================================

//---[ Subtraction ]--------------------
// out = in1 - in2
kernel void subtract_vv(const int entries,
                        const VTYPE * in1,
                        const VTYPE * in2,
                        VTYPE * out) {
  for (int oi = 0; oi < entries; oi += 64; outer) {
    for (int i = oi; i < (oi + 64); ++i; inner) {
      if (i < entries) {
        out[i] = in1[i] - in2[i];
      }
    }
  }
}

// out = in1 - (alpha * in2)
kernel void subtract_vcv(const int entries,
                         const VTYPE * in1,
                         const VTYPE alpha,
                         const VTYPE * in2,
                         VTYPE * out) {
  for (int oi = 0; oi < entries; oi += 64; outer) {
    for (int i = oi; i < (oi + 64); ++i; inner) {
      if (i < entries) {
        out[i] = in1[i] - (alpha * in2[i]);
      }
    }
  }
}

// out = alpha * (in1 - in2)
kernel void subtract_cvv(const int entries,
                         const VTYPE alpha,
                         const VTYPE * in1,
                         const VTYPE * in2,
                         VTYPE * out) {
  for (int oi = 0; oi < entries; oi += 64; outer) {
    for (int i = oi; i < (oi + 64); ++i; inner) {
      if (i < entries) {
        out[i] = alpha * (in1[i] - in2[i]);
      }
    }
  }
}

// out = (alpha * in1) - (beta * in2)
kernel void subtract_cvcv(const int entries,
                          const VTYPE alpha,
                          const VTYPE * in1,
                          const VTYPE beta,
                          const VTYPE * in2,
                          VTYPE * out) {
  for (int oi = 0; oi < entries; oi += 64; outer) {
    for (int i = oi; i < (oi + 64); ++i; inner) {
      if (i < entries) {
        out[i] = (alpha * in1[i]) - (beta * in2[i]);
      }
    }
  }
}
//======================================

//---[ Vector Operations ]--------------
#ifndef DOT_INNER
#  define DOT_INNER 128
#endif
#ifndef DOT_BLOCK
#  define DOT_BLOCK 128
#endif
#define DOT_OUTER (DOT_INNER * DOT_BLOCK)

kernel void cpu_dot(const int entries,
                    const VTYPE * restrict vec,
                    VTYPE * restrict vecReduction) {
  for (int oi = 0; oi < entries; oi += DOT_INNER; outer) {
    VTYPE r_red = 0;
    for (int i = 0; i < DOT_INNER; ++i; inner) {
      r_red += entries[oi + i];
    }
  }
}

kernel void gpu_dot(const int entries,
                    const VTYPE * restrict vec,
                    VTYPE * restrict vecReduction) {

  for (int oi = 0; oi < (entries + DOT_OUTER - 1)/DOT_OUTER; ++oi; outer) {
    shared VTYPE s_red[DOT_INNER];

    for (int i = 0; i < (DOT_INNER * DOT_BLOCK); i += DOT_INNER; inner) {
      VTYPE r_red = 0;
      for (int j = 0; j < DOT_BLOCK; ++j) {
        if ((oi*DOT_OUTER + i*DOT_BLOCK + j) < entries) {
          r_red += a[oi*DOT_OUTER + i*DOT_BLOCK + j];
        }
      }
      s_red[i] = r_red;
    }

#define UNROLLED_DOT_ITER(N)                      \
    for (int i = 0; i < DOT_INNER; ++i; inner) {  \
      if (DOT_BLOCK >= (2*N)) {                   \
        if (i < N) {                              \
          s_red[i] += s_red[i + N];               \
        }                                         \
      }                                           \
    }

    UNROLLED_DOT_ITER(256);
    UNROLLED_DOT_ITER(128);
    UNROLLED_DOT_ITER(64);
    UNROLLED_DOT_ITER(32);
    UNROLLED_DOT_ITER(16);
    UNROLLED_DOT_ITER(8);
    UNROLLED_DOT_ITER(2);
    UNROLLED_DOT_ITER(1);
    for (int i = 0; i < DOT_INNER; ++i; inner) {
      if (i == 0) {
        vecReduction[oi] = s_red[0];
      }
    }
  }
}
//======================================