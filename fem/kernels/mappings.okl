// Copyright (c) 2010, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-443211. All Rights
// reserved. See file COPYRIGHT for details.
//
// This file is part of the MFEM library. For more information and source code
// availability see http://mfem.org.
//
// MFEM is free software; you can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License (as published by the Free
// Software Foundation) version 2.1 dated February 1999.

/*
  ---[ Defines Known At Compile-Time ]------------
  TILESIZE : Tilesize for iterating over dofs
  ================================================
*/

kernel void VectorExtract(const int dofs,
                          const int * restrict offsets,
                          const int * restrict indices,
                          const double * restrict globalX,
                          double * restrict localX) {

  for (int i = 0; i < dofs; ++i; tile(TILESIZE)) {
    if (i < dofs) {
      const int offset = offsets[i];
      const int nextOffset = offsets[i + 1];
      const double dofValue = globalX[i];
      for (int j = offset; j < nextOffset; ++j) {
        localX[indices[j]] = dofValue;
      }
    }
  }
}

kernel void VectorAssemble(const int dofs,
                           const int * restrict offsets,
                           const int * restrict indices,
                           const double * restrict localX,
                           double * restrict globalX) {

  for (int i = 0; i < dofs; ++i; tile(TILESIZE)) {
    if (i < dofs) {
      const int offset = offsets[i];
      const int nextOffset = offsets[i + 1];
      double dofValue = 0;
      for (int j = offset; j < nextOffset; ++j) {
        dofValue += localX[indices[j]];
      }
      globalX[i] = dofValue;
    }
  }
}